// Code generated by mockery v2.44.1. DO NOT EDIT.

package db

import (
	context "context"
	db "mnezerka/myspots-server/db"

	mock "github.com/stretchr/testify/mock"

	mongo "go.mongodb.org/mongo-driver/mongo"

	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockCollection is an autogenerated mock type for the Collection type
type MockCollection struct {
	mock.Mock
}

type MockCollection_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCollection) EXPECT() *MockCollection_Expecter {
	return &MockCollection_Expecter{mock: &_m.Mock}
}

// Aggregate provides a mock function with given fields: _a0, _a1
func (_m *MockCollection) Aggregate(_a0 context.Context, _a1 interface{}) (db.Cursor, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Aggregate")
	}

	var r0 db.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (db.Cursor, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) db.Cursor); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollection_Aggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Aggregate'
type MockCollection_Aggregate_Call struct {
	*mock.Call
}

// Aggregate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
func (_e *MockCollection_Expecter) Aggregate(_a0 interface{}, _a1 interface{}) *MockCollection_Aggregate_Call {
	return &MockCollection_Aggregate_Call{Call: _e.mock.On("Aggregate", _a0, _a1)}
}

func (_c *MockCollection_Aggregate_Call) Run(run func(_a0 context.Context, _a1 interface{})) *MockCollection_Aggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockCollection_Aggregate_Call) Return(_a0 db.Cursor, _a1 error) *MockCollection_Aggregate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollection_Aggregate_Call) RunAndReturn(run func(context.Context, interface{}) (db.Cursor, error)) *MockCollection_Aggregate_Call {
	_c.Call.Return(run)
	return _c
}

// CountDocuments provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCollection) CountDocuments(_a0 context.Context, _a1 interface{}, _a2 ...*options.CountOptions) (int64, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CountDocuments")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.CountOptions) (int64, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.CountOptions) int64); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.CountOptions) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollection_CountDocuments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountDocuments'
type MockCollection_CountDocuments_Call struct {
	*mock.Call
}

// CountDocuments is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
//   - _a2 ...*options.CountOptions
func (_e *MockCollection_Expecter) CountDocuments(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCollection_CountDocuments_Call {
	return &MockCollection_CountDocuments_Call{Call: _e.mock.On("CountDocuments",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCollection_CountDocuments_Call) Run(run func(_a0 context.Context, _a1 interface{}, _a2 ...*options.CountOptions)) *MockCollection_CountDocuments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.CountOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.CountOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockCollection_CountDocuments_Call) Return(_a0 int64, _a1 error) *MockCollection_CountDocuments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollection_CountDocuments_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.CountOptions) (int64, error)) *MockCollection_CountDocuments_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOne provides a mock function with given fields: _a0, _a1
func (_m *MockCollection) DeleteOne(_a0 context.Context, _a1 interface{}) (int64, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOne")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollection_DeleteOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOne'
type MockCollection_DeleteOne_Call struct {
	*mock.Call
}

// DeleteOne is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
func (_e *MockCollection_Expecter) DeleteOne(_a0 interface{}, _a1 interface{}) *MockCollection_DeleteOne_Call {
	return &MockCollection_DeleteOne_Call{Call: _e.mock.On("DeleteOne", _a0, _a1)}
}

func (_c *MockCollection_DeleteOne_Call) Run(run func(_a0 context.Context, _a1 interface{})) *MockCollection_DeleteOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockCollection_DeleteOne_Call) Return(_a0 int64, _a1 error) *MockCollection_DeleteOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollection_DeleteOne_Call) RunAndReturn(run func(context.Context, interface{}) (int64, error)) *MockCollection_DeleteOne_Call {
	_c.Call.Return(run)
	return _c
}

// Find provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockCollection) Find(_a0 context.Context, _a1 interface{}, _a2 ...*options.FindOptions) (db.Cursor, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 db.Cursor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) (db.Cursor, error)); ok {
		return rf(_a0, _a1, _a2...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*options.FindOptions) db.Cursor); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.Cursor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*options.FindOptions) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollection_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockCollection_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
//   - _a2 ...*options.FindOptions
func (_e *MockCollection_Expecter) Find(_a0 interface{}, _a1 interface{}, _a2 ...interface{}) *MockCollection_Find_Call {
	return &MockCollection_Find_Call{Call: _e.mock.On("Find",
		append([]interface{}{_a0, _a1}, _a2...)...)}
}

func (_c *MockCollection_Find_Call) Run(run func(_a0 context.Context, _a1 interface{}, _a2 ...*options.FindOptions)) *MockCollection_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.FindOptions, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(*options.FindOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockCollection_Find_Call) Return(_a0 db.Cursor, _a1 error) *MockCollection_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollection_Find_Call) RunAndReturn(run func(context.Context, interface{}, ...*options.FindOptions) (db.Cursor, error)) *MockCollection_Find_Call {
	_c.Call.Return(run)
	return _c
}

// FindOne provides a mock function with given fields: _a0, _a1
func (_m *MockCollection) FindOne(_a0 context.Context, _a1 interface{}) db.SingleResult {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 db.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) db.SingleResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.SingleResult)
		}
	}

	return r0
}

// MockCollection_FindOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOne'
type MockCollection_FindOne_Call struct {
	*mock.Call
}

// FindOne is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
func (_e *MockCollection_Expecter) FindOne(_a0 interface{}, _a1 interface{}) *MockCollection_FindOne_Call {
	return &MockCollection_FindOne_Call{Call: _e.mock.On("FindOne", _a0, _a1)}
}

func (_c *MockCollection_FindOne_Call) Run(run func(_a0 context.Context, _a1 interface{})) *MockCollection_FindOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockCollection_FindOne_Call) Return(_a0 db.SingleResult) *MockCollection_FindOne_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCollection_FindOne_Call) RunAndReturn(run func(context.Context, interface{}) db.SingleResult) *MockCollection_FindOne_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function with given fields: _a0, _a1
func (_m *MockCollection) InsertMany(_a0 context.Context, _a1 []interface{}) ([]interface{}, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 []interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}) ([]interface{}, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []interface{}) []interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollection_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type MockCollection_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []interface{}
func (_e *MockCollection_Expecter) InsertMany(_a0 interface{}, _a1 interface{}) *MockCollection_InsertMany_Call {
	return &MockCollection_InsertMany_Call{Call: _e.mock.On("InsertMany", _a0, _a1)}
}

func (_c *MockCollection_InsertMany_Call) Run(run func(_a0 context.Context, _a1 []interface{})) *MockCollection_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]interface{}))
	})
	return _c
}

func (_c *MockCollection_InsertMany_Call) Return(_a0 []interface{}, _a1 error) *MockCollection_InsertMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollection_InsertMany_Call) RunAndReturn(run func(context.Context, []interface{}) ([]interface{}, error)) *MockCollection_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// InsertOne provides a mock function with given fields: _a0, _a1
func (_m *MockCollection) InsertOne(_a0 context.Context, _a1 interface{}) (interface{}, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InsertOne")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (interface{}, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollection_InsertOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertOne'
type MockCollection_InsertOne_Call struct {
	*mock.Call
}

// InsertOne is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
func (_e *MockCollection_Expecter) InsertOne(_a0 interface{}, _a1 interface{}) *MockCollection_InsertOne_Call {
	return &MockCollection_InsertOne_Call{Call: _e.mock.On("InsertOne", _a0, _a1)}
}

func (_c *MockCollection_InsertOne_Call) Run(run func(_a0 context.Context, _a1 interface{})) *MockCollection_InsertOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *MockCollection_InsertOne_Call) Return(_a0 interface{}, _a1 error) *MockCollection_InsertOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollection_InsertOne_Call) RunAndReturn(run func(context.Context, interface{}) (interface{}, error)) *MockCollection_InsertOne_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMany provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockCollection) UpdateMany(_a0 context.Context, _a1 interface{}, _a2 interface{}, _a3 ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMany")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)); ok {
		return rf(_a0, _a1, _a2, _a3...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) *mongo.UpdateResult); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollection_UpdateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMany'
type MockCollection_UpdateMany_Call struct {
	*mock.Call
}

// UpdateMany is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
//   - _a2 interface{}
//   - _a3 ...*options.UpdateOptions
func (_e *MockCollection_Expecter) UpdateMany(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockCollection_UpdateMany_Call {
	return &MockCollection_UpdateMany_Call{Call: _e.mock.On("UpdateMany",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockCollection_UpdateMany_Call) Run(run func(_a0 context.Context, _a1 interface{}, _a2 interface{}, _a3 ...*options.UpdateOptions)) *MockCollection_UpdateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.UpdateOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.UpdateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockCollection_UpdateMany_Call) Return(_a0 *mongo.UpdateResult, _a1 error) *MockCollection_UpdateMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollection_UpdateMany_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)) *MockCollection_UpdateMany_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOne provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockCollection) UpdateOne(_a0 context.Context, _a1 interface{}, _a2 interface{}, _a3 ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOne")
	}

	var r0 *mongo.UpdateResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)); ok {
		return rf(_a0, _a1, _a2, _a3...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) *mongo.UpdateResult); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mongo.UpdateResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCollection_UpdateOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOne'
type MockCollection_UpdateOne_Call struct {
	*mock.Call
}

// UpdateOne is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
//   - _a2 interface{}
//   - _a3 ...*options.UpdateOptions
func (_e *MockCollection_Expecter) UpdateOne(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockCollection_UpdateOne_Call {
	return &MockCollection_UpdateOne_Call{Call: _e.mock.On("UpdateOne",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockCollection_UpdateOne_Call) Run(run func(_a0 context.Context, _a1 interface{}, _a2 interface{}, _a3 ...*options.UpdateOptions)) *MockCollection_UpdateOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*options.UpdateOptions, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*options.UpdateOptions)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockCollection_UpdateOne_Call) Return(_a0 *mongo.UpdateResult, _a1 error) *MockCollection_UpdateOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCollection_UpdateOne_Call) RunAndReturn(run func(context.Context, interface{}, interface{}, ...*options.UpdateOptions) (*mongo.UpdateResult, error)) *MockCollection_UpdateOne_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCollection creates a new instance of MockCollection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCollection(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCollection {
	mock := &MockCollection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
