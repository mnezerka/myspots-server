// Code generated by mockery v2.44.1. DO NOT EDIT.

package entities

import (
	context "context"
	entities "mnezerka/myspots-server/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockSpotsRepository is an autogenerated mock type for the SpotsRepository type
type MockSpotsRepository struct {
	mock.Mock
}

type MockSpotsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSpotsRepository) EXPECT() *MockSpotsRepository_Expecter {
	return &MockSpotsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: c, spot
func (_m *MockSpotsRepository) Create(c context.Context, spot *entities.Spot) error {
	ret := _m.Called(c, spot)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Spot) error); ok {
		r0 = rf(c, spot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSpotsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSpotsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - c context.Context
//   - spot *entities.Spot
func (_e *MockSpotsRepository_Expecter) Create(c interface{}, spot interface{}) *MockSpotsRepository_Create_Call {
	return &MockSpotsRepository_Create_Call{Call: _e.mock.On("Create", c, spot)}
}

func (_c *MockSpotsRepository_Create_Call) Run(run func(c context.Context, spot *entities.Spot)) *MockSpotsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Spot))
	})
	return _c
}

func (_c *MockSpotsRepository_Create_Call) Return(_a0 error) *MockSpotsRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSpotsRepository_Create_Call) RunAndReturn(run func(context.Context, *entities.Spot) error) *MockSpotsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Fetch provides a mock function with given fields: c
func (_m *MockSpotsRepository) Fetch(c context.Context) ([]entities.Spot, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 []entities.Spot
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Spot, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Spot); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Spot)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSpotsRepository_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type MockSpotsRepository_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - c context.Context
func (_e *MockSpotsRepository_Expecter) Fetch(c interface{}) *MockSpotsRepository_Fetch_Call {
	return &MockSpotsRepository_Fetch_Call{Call: _e.mock.On("Fetch", c)}
}

func (_c *MockSpotsRepository_Fetch_Call) Run(run func(c context.Context)) *MockSpotsRepository_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSpotsRepository_Fetch_Call) Return(_a0 []entities.Spot, _a1 error) *MockSpotsRepository_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSpotsRepository_Fetch_Call) RunAndReturn(run func(context.Context) ([]entities.Spot, error)) *MockSpotsRepository_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSpotsRepository creates a new instance of MockSpotsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSpotsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSpotsRepository {
	mock := &MockSpotsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
